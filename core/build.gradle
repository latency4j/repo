plugins {
  id 'org.ajoberstar.grgit' version '1.4.2'
  id 'org.ajoberstar.github-pages' version '1.4.2'
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'maven-publish'

['java', 'maven-publish'].each {
    apply plugin : it
}

group=projectGroup
version=projectVersion
sourceCompatibility=projectSourceCompatibility

repositories {
	mavenCentral()
	jcenter()
}

configurations {
    
    pom
    
    compile {
        description = 'compile classpath'
        transitive = false
    }
    runtime {
        extendsFrom compile
    }
    
    provided
}

sourceSets {
    main { compileClasspath += configurations.provided }
}

javadoc {
    options.tags = [ "<q>" ] 
    options.addStringOption('Xdoclint:none', '-quiet')
}

githubPages {
  repoUri = 'https://github.com/latency4j/repo'
  pages {
    from javadoc
  }
}

	
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

task signPom(type: Sign) {
    sign configurations.pom
}

uploadArchives {
	repositories {
		mavenDeployer {	
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }	
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
				authentication(userName: nexusUsername, password: nexusPassword);
			}
			snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: nexusUsername, password: nexusPassword);
            }  
         	
         	pom.version = projectVersion
        	pom.artifactId = rootProject.name
        	pom.groupId = projectGroup            
         	
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Latency4J'
                    description 'Java Latency Monitoring Tool'
                    url 'https://github.com/latency4j/repo'
                    scm {
                        url 'https://github.com/latency4j/repo.git'
                        connection 'scm:git:git://github.com/latency4j/repo.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'https://oss.sonatype.org'
                        }
                    }
                    developers {
                        developer {
                            id 'thecodeqquest'
                            name 'TheCodeQuest'
                            email 'thecodequest@gmail.com'
                        }
                    }
                }
            }         	   
		}
	}
}

dependencies {
	compile group: 'javax', name: 'javaee-api', version: '7.0'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
	compile group: 'org.aspectj', name: 'aspectjrt', version: '1.8.9'
	compile group: 'cglib', name: 'cglib-nodep', version: '3.2.2'	
	compile group: 'org.springframework', name: 'spring-context', version: '4.2.5.RELEASE'	
	compile group: 'org.springframework', name: 'spring-beans', version: '4.2.5.RELEASE'
	compile group: 'org.springframework', name: 'spring-core', version: '4.2.5.RELEASE'

	runtime group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.9'

	testCompile group: 'org.springframework', name: 'spring-test', version: '4.2.5.RELEASE'
	testCompile group: 'junit', name: 'junit', version: '4.11'

	testRuntime group: 'org.springframework', name: 'spring-context-support', version: '4.2.5.RELEASE'
}

task zip(type: Zip) {
	from jar.outputs.files
	into ('src') {
    	from ('/src') {
    	include '*/**'
    	}
    }
    into('libs') {
        from configurations.testRuntime
    }
}